package Node;
import java.util.*;
/**
 *
 * @author Salvador
 */
public class QueueADT {
   
    private Node tail;
    int size;
    public QueueADT()
    {
        
        tail = null;
    }
    
   public Object dequeue() throws QueueException 
   {
    if (!isEmpty()) 
    {
      
      Node head = tail.next;
      if (head == tail) { 
        tail = null;           
      }
      else 
      {
        tail.next = head.next;
      }  
      return head.size;
    }
    else
    {
      throw new QueueException("QueueException on dequeue:"
                             + "queue empty");
    }  
  }  
    public void enqueue(int newItem)
    {
        Node nodee = new Node(newItem);
        if (isEmpty())
        {
            nodee.next = nodee;
        }
        else 
        {
           nodee.next = tail.next;
           tail.next = nodee;
        }
        tail = nodee;
    }
   public void dequeueAll()
   {
       
       tail = null;
       System.out.print("Queue Cleared!\n");
   }
     public boolean isEmpty()
    {
      
      return tail == null;
    }

     public Object peek() throws QueueException 
     {
         if (!isEmpty()) 
         {
      
             Node head = tail.next;
      
            return head.size;
         }
    else 
    {
      throw new QueueException("QueueException on peek:"
                             + "queue empty");
    }  
  }  
    
   public class QueueException extends RuntimeException 
   {

  public QueueException(String s) 
  {
    super(s);
  }  
}  
   

}
